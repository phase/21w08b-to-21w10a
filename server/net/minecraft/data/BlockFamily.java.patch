--- net/minecraft/data/BlockFamily.java
+++ net/minecraft/data/BlockFamily.java
@@ -7,35 +7,35 @@
 import net.minecraft.world.level.block.Block;
 import org.apache.commons.lang3.StringUtils;
 
 public class BlockFamily {
    private final Block baseBlock;
-   private final Map<BlockFamily.Variant, Block> shapes;
+   private final Map<BlockFamily.Variant, Block> variants;
    private boolean generateModel;
    private boolean generateRecipe;
    @Nullable
    private String recipeGroupPrefix;
    @Nullable
    private String recipeUnlockedBy;
 
    private BlockFamily(Block var1) {
-      this.shapes = Maps.newHashMap();
+      this.variants = Maps.newHashMap();
       this.generateModel = true;
       this.generateRecipe = true;
       this.baseBlock = var1;
    }
 
    public Block getBaseBlock() {
       return this.baseBlock;
    }
 
-   public Map<BlockFamily.Variant, Block> getShapes() {
-      return this.shapes;
+   public Map<BlockFamily.Variant, Block> getVariants() {
+      return this.variants;
    }
 
    public Block get(BlockFamily.Variant var1) {
-      return (Block)this.shapes.get(var1);
+      return (Block)this.variants.get(var1);
    }
 
    public boolean shouldGenerateModel() {
       return this.generateModel;
    }
@@ -62,67 +62,72 @@
       public BlockFamily getFamily() {
          return this.family;
       }
 
       public BlockFamily.Builder button(Block var1) {
-         this.family.shapes.put(BlockFamily.Variant.BUTTON, var1);
+         this.family.variants.put(BlockFamily.Variant.BUTTON, var1);
          return this;
       }
 
       public BlockFamily.Builder chiseled(Block var1) {
-         this.family.shapes.put(BlockFamily.Variant.CHISELED, var1);
+         this.family.variants.put(BlockFamily.Variant.CHISELED, var1);
          return this;
       }
 
+      public BlockFamily.Builder cracked(Block var1) {
+         this.family.variants.put(BlockFamily.Variant.CRACKED, var1);
+         return this;
+      }
+
       public BlockFamily.Builder door(Block var1) {
-         this.family.shapes.put(BlockFamily.Variant.DOOR, var1);
+         this.family.variants.put(BlockFamily.Variant.DOOR, var1);
          return this;
       }
 
       public BlockFamily.Builder fence(Block var1) {
-         this.family.shapes.put(BlockFamily.Variant.FENCE, var1);
+         this.family.variants.put(BlockFamily.Variant.FENCE, var1);
          return this;
       }
 
       public BlockFamily.Builder fenceGate(Block var1) {
-         this.family.shapes.put(BlockFamily.Variant.FENCE_GATE, var1);
+         this.family.variants.put(BlockFamily.Variant.FENCE_GATE, var1);
          return this;
       }
 
       public BlockFamily.Builder sign(Block var1, Block var2) {
-         this.family.shapes.put(BlockFamily.Variant.SIGN, var1);
-         this.family.shapes.put(BlockFamily.Variant.WALL_SIGN, var2);
+         this.family.variants.put(BlockFamily.Variant.SIGN, var1);
+         this.family.variants.put(BlockFamily.Variant.WALL_SIGN, var2);
          return this;
       }
 
       public BlockFamily.Builder slab(Block var1) {
-         this.family.shapes.put(BlockFamily.Variant.SLAB, var1);
+         this.family.variants.put(BlockFamily.Variant.SLAB, var1);
          return this;
       }
 
       public BlockFamily.Builder stairs(Block var1) {
-         this.family.shapes.put(BlockFamily.Variant.STAIRS, var1);
+         this.family.variants.put(BlockFamily.Variant.STAIRS, var1);
          return this;
       }
 
       public BlockFamily.Builder pressurePlate(Block var1) {
-         this.family.shapes.put(BlockFamily.Variant.PRESSURE_PLATE, var1);
+         this.family.variants.put(BlockFamily.Variant.PRESSURE_PLATE, var1);
          return this;
       }
 
       public BlockFamily.Builder polished(Block var1) {
-         this.family.shapes.put(BlockFamily.Variant.POLISHED, var1);
+         this.family.variants.put(BlockFamily.Variant.POLISHED, var1);
          return this;
       }
 
       public BlockFamily.Builder trapdoor(Block var1) {
-         this.family.shapes.put(BlockFamily.Variant.TRAPDOOR, var1);
+         this.family.variants.put(BlockFamily.Variant.TRAPDOOR, var1);
          return this;
       }
 
       public BlockFamily.Builder wall(Block var1) {
-         this.family.shapes.put(BlockFamily.Variant.WALL, var1);
+         this.family.variants.put(BlockFamily.Variant.WALL, var1);
          return this;
       }
 
       public BlockFamily.Builder dontGenerateModel() {
          this.family.generateModel = false;
@@ -146,10 +151,11 @@
    }
 
    public static enum Variant {
       BUTTON("button"),
       CHISELED("chiseled"),
+      CRACKED("cracked"),
       DOOR("door"),
       FENCE("fence"),
       FENCE_GATE("fence_gate"),
       SIGN("sign"),
       SLAB("slab"),
