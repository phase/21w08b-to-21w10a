--- net/minecraft/world/level/levelgen/structure/StructurePiece.java
+++ net/minecraft/world/level/levelgen/structure/StructurePiece.java
@@ -1,17 +1,19 @@
 package net.minecraft.world.level.levelgen.structure;
 
 import com.google.common.collect.ImmutableSet;
+import com.mojang.serialization.DataResult;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
 import java.util.Set;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Registry;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.NbtOps;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.ServerLevelAccessor;
@@ -30,12 +32,15 @@
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.level.levelgen.feature.NoiseEffect;
 import net.minecraft.world.level.levelgen.feature.StructurePieceType;
 import net.minecraft.world.level.material.FluidState;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 
 public abstract class StructurePiece {
+   private static final Logger LOGGER = LogManager.getLogger();
    protected static final BlockState CAVE_AIR;
    protected BoundingBox boundingBox;
    @Nullable
    private Direction orientation;
    private Mirror mirror;
@@ -50,21 +55,29 @@
    }
 
    public StructurePiece(StructurePieceType var1, CompoundTag var2) {
       this(var1, var2.getInt("GD"));
       if (var2.contains("BB")) {
-         this.boundingBox = new BoundingBox(var2.getIntArray("BB"));
+         DataResult var10001 = BoundingBox.CODEC.parse(NbtOps.INSTANCE, var2.get("BB"));
+         Logger var10002 = LOGGER;
+         var10002.getClass();
+         this.boundingBox = (BoundingBox)var10001.resultOrPartial(var10002::error).orElse(new BoundingBox(BlockPos.ZERO));
       }
 
       int var3 = var2.getInt("O");
       this.setOrientation(var3 == -1 ? null : Direction.from2DDataValue(var3));
    }
 
    public final CompoundTag createTag() {
       CompoundTag var1 = new CompoundTag();
       var1.putString("id", Registry.STRUCTURE_PIECE.getKey(this.getType()).toString());
-      var1.put("BB", this.boundingBox.createTag());
+      DataResult var10000 = BoundingBox.CODEC.encodeStart(NbtOps.INSTANCE, this.boundingBox);
+      Logger var10001 = LOGGER;
+      var10001.getClass();
+      var10000.resultOrPartial(var10001::error).ifPresent((var1x) -> {
+         var1.put("BB", var1x);
+      });
       Direction var2 = this.getOrientation();
       var1.putInt("O", var2 == null ? -1 : var2.get2DDataValue());
       var1.putInt("GD", this.genDepth);
       this.addAdditionalSaveData(var1);
       return var1;
