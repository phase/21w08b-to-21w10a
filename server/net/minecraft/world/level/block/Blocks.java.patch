--- net/minecraft/world/level/block/Blocks.java
+++ net/minecraft/world/level/block/Blocks.java
@@ -72,10 +72,11 @@
    public static final Block GOLD_ORE;
    public static final Block DEEPSLATE_GOLD_ORE;
    public static final Block IRON_ORE;
    public static final Block DEEPSLATE_IRON_ORE;
    public static final Block COAL_ORE;
+   public static final Block DEEPSLATE_COAL_ORE;
    public static final Block NETHER_GOLD_ORE;
    public static final Block OAK_LOG;
    public static final Block SPRUCE_LOG;
    public static final Block BIRCH_LOG;
    public static final Block JUNGLE_LOG;
@@ -317,10 +318,11 @@
    public static final Block DRAGON_EGG;
    public static final Block REDSTONE_LAMP;
    public static final Block COCOA;
    public static final Block SANDSTONE_STAIRS;
    public static final Block EMERALD_ORE;
+   public static final Block DEEPSLATE_EMERALD_ORE;
    public static final Block ENDER_CHEST;
    public static final Block TRIPWIRE_HOOK;
    public static final Block TRIPWIRE;
    public static final Block EMERALD_BLOCK;
    public static final Block SPRUCE_STAIRS;
@@ -860,10 +862,11 @@
    public static final Block OXIDIZED_COPPER;
    public static final Block WEATHERED_COPPER;
    public static final Block EXPOSED_COPPER;
    public static final Block COPPER_BLOCK;
    public static final Block COPPER_ORE;
+   public static final Block DEEPSLATE_COPPER_ORE;
    public static final Block OXIDIZED_CUT_COPPER;
    public static final Block WEATHERED_CUT_COPPER;
    public static final Block EXPOSED_CUT_COPPER;
    public static final Block CUT_COPPER;
    public static final Block OXIDIZED_CUT_COPPER_STAIRS;
@@ -917,10 +920,13 @@
    public static final Block DEEPSLATE_BRICKS;
    public static final Block DEEPSLATE_BRICK_STAIRS;
    public static final Block DEEPSLATE_BRICK_SLAB;
    public static final Block DEEPSLATE_BRICK_WALL;
    public static final Block CHISELED_DEEPSLATE;
+   public static final Block CRACKED_DEEPSLATE_BRICKS;
+   public static final Block CRACKED_DEEPSLATE_TILES;
+   public static final Block INFESTED_DEEPSLATE;
    public static final Block SMOOTH_BASALT;
 
    private static ToIntFunction<BlockState> litBlockEmission(int var0) {
       return (var1) -> {
          return (Boolean)var1.getValue(BlockStateProperties.LIT) ? var0 : 0;
@@ -1044,10 +1050,11 @@
       GOLD_ORE = register("gold_ore", new OreBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(3.0F, 3.0F)));
       DEEPSLATE_GOLD_ORE = register("deepslate_gold_ore", new OreBlock(BlockBehaviour.Properties.copy(GOLD_ORE).strength(4.5F, 3.0F).sound(SoundType.DEEPSLATE)));
       IRON_ORE = register("iron_ore", new OreBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(3.0F, 3.0F)));
       DEEPSLATE_IRON_ORE = register("deepslate_iron_ore", new OreBlock(BlockBehaviour.Properties.copy(IRON_ORE).strength(4.5F, 3.0F).sound(SoundType.DEEPSLATE)));
       COAL_ORE = register("coal_ore", new OreBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(3.0F, 3.0F), IntRange.of(0, 2)));
+      DEEPSLATE_COAL_ORE = register("deepslate_coal_ore", new OreBlock(BlockBehaviour.Properties.copy(COAL_ORE).strength(4.5F, 3.0F).sound(SoundType.DEEPSLATE)));
       NETHER_GOLD_ORE = register("nether_gold_ore", new OreBlock(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.NETHER).requiresCorrectToolForDrops().strength(3.0F, 3.0F).sound(SoundType.NETHER_GOLD_ORE), IntRange.of(0, 1)));
       OAK_LOG = register("oak_log", log(MaterialColor.WOOD, MaterialColor.PODZOL));
       SPRUCE_LOG = register("spruce_log", log(MaterialColor.PODZOL, MaterialColor.COLOR_BROWN));
       BIRCH_LOG = register("birch_log", log(MaterialColor.SAND, MaterialColor.QUARTZ));
       JUNGLE_LOG = register("jungle_log", log(MaterialColor.DIRT, MaterialColor.PODZOL));
@@ -1337,10 +1344,11 @@
       }).noOcclusion()));
       REDSTONE_LAMP = register("redstone_lamp", new RedstoneLampBlock(BlockBehaviour.Properties.of(Material.BUILDABLE_GLASS).lightLevel(litBlockEmission(15)).strength(0.3F).sound(SoundType.GLASS).isValidSpawn(Blocks::always)));
       COCOA = register("cocoa", new CocoaBlock(BlockBehaviour.Properties.of(Material.PLANT).randomTicks().strength(0.2F, 3.0F).sound(SoundType.WOOD).noOcclusion()));
       SANDSTONE_STAIRS = register("sandstone_stairs", new StairBlock(SANDSTONE.defaultBlockState(), BlockBehaviour.Properties.copy(SANDSTONE)));
       EMERALD_ORE = register("emerald_ore", new OreBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(3.0F, 3.0F), IntRange.of(3, 7)));
+      DEEPSLATE_EMERALD_ORE = register("deepslate_emerald_ore", new OreBlock(BlockBehaviour.Properties.copy(EMERALD_ORE).strength(4.5F, 3.0F).sound(SoundType.DEEPSLATE), IntRange.of(3, 7)));
       ENDER_CHEST = register("ender_chest", new EnderChestBlock(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(22.5F, 600.0F).lightLevel((var0x) -> {
          return 7;
       })));
       TRIPWIRE_HOOK = register("tripwire_hook", new TripWireHookBlock(BlockBehaviour.Properties.of(Material.DECORATION).noCollission()));
       TRIPWIRE = register("tripwire", new TripWireBlock((TripWireHookBlock)TRIPWIRE_HOOK, BlockBehaviour.Properties.of(Material.DECORATION).noCollission()));
@@ -1917,11 +1925,12 @@
       }), 8));
       OXIDIZED_COPPER = register("oxidized_copper", new WeatheringCopperFullBlock(BlockBehaviour.Properties.of(Material.METAL, MaterialColor.WARPED_NYLIUM).requiresCorrectToolForDrops().strength(3.0F, 6.0F).sound(SoundType.COPPER)));
       WEATHERED_COPPER = register("weathered_copper", new WeatheringCopperFullBlock(BlockBehaviour.Properties.of(Material.METAL, MaterialColor.WARPED_STEM).requiresCorrectToolForDrops().strength(3.0F, 6.0F).sound(SoundType.COPPER), WeatheringCopper.WeatherState.WEATHERED, OXIDIZED_COPPER));
       EXPOSED_COPPER = register("exposed_copper", new WeatheringCopperFullBlock(BlockBehaviour.Properties.of(Material.METAL, MaterialColor.TERRACOTTA_LIGHT_GRAY).requiresCorrectToolForDrops().strength(3.0F, 6.0F).sound(SoundType.COPPER), WeatheringCopper.WeatherState.EXPOSED, WEATHERED_COPPER));
       COPPER_BLOCK = register("copper_block", new WeatheringCopperFullBlock(BlockBehaviour.Properties.of(Material.METAL, MaterialColor.COLOR_ORANGE).requiresCorrectToolForDrops().strength(3.0F, 6.0F).sound(SoundType.COPPER), WeatheringCopper.WeatherState.UNAFFECTED, EXPOSED_COPPER));
-      COPPER_ORE = register("copper_ore", new Block(BlockBehaviour.Properties.copy(IRON_ORE)));
+      COPPER_ORE = register("copper_ore", new OreBlock(BlockBehaviour.Properties.copy(IRON_ORE)));
+      DEEPSLATE_COPPER_ORE = register("deepslate_copper_ore", new OreBlock(BlockBehaviour.Properties.copy(COPPER_ORE).strength(4.5F, 3.0F).sound(SoundType.DEEPSLATE)));
       OXIDIZED_CUT_COPPER = register("oxidized_cut_copper", new WeatheringCopperFullBlock(BlockBehaviour.Properties.copy(OXIDIZED_COPPER)));
       WEATHERED_CUT_COPPER = register("weathered_cut_copper", new WeatheringCopperFullBlock(BlockBehaviour.Properties.copy(WEATHERED_COPPER), WeatheringCopper.WeatherState.WEATHERED, OXIDIZED_CUT_COPPER));
       EXPOSED_CUT_COPPER = register("exposed_cut_copper", new WeatheringCopperFullBlock(BlockBehaviour.Properties.copy(EXPOSED_COPPER), WeatheringCopper.WeatherState.EXPOSED, WEATHERED_CUT_COPPER));
       CUT_COPPER = register("cut_copper", new WeatheringCopperFullBlock(BlockBehaviour.Properties.copy(COPPER_BLOCK), WeatheringCopper.WeatherState.UNAFFECTED, EXPOSED_CUT_COPPER));
       OXIDIZED_CUT_COPPER_STAIRS = register("oxidized_cut_copper_stairs", new WeatheringCopperStairBlock(OXIDIZED_CUT_COPPER.defaultBlockState(), BlockBehaviour.Properties.copy(OXIDIZED_CUT_COPPER)));
@@ -1945,23 +1954,23 @@
       WAXED_EXPOSED_CUT_COPPER_SLAB = register("waxed_exposed_cut_copper_slab", new SlabBlock(BlockBehaviour.Properties.copy(WAXED_EXPOSED_CUT_COPPER).requiresCorrectToolForDrops()));
       WAXED_CUT_COPPER_SLAB = register("waxed_cut_copper_slab", new SlabBlock(BlockBehaviour.Properties.copy(WAXED_CUT_COPPER).requiresCorrectToolForDrops()));
       LIGHTNING_ROD = register("lightning_rod", new LightningRodBlock(BlockBehaviour.Properties.of(Material.METAL, MaterialColor.COLOR_ORANGE).requiresCorrectToolForDrops().strength(3.0F, 6.0F).sound(SoundType.COPPER).noOcclusion()));
       POINTED_DRIPSTONE = register("pointed_dripstone", new PointedDripstoneBlock(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.TERRACOTTA_BROWN).noOcclusion().sound(SoundType.POINTED_DRIPSTONE).randomTicks().strength(1.5F, 3.0F)));
       DRIPSTONE_BLOCK = register("dripstone_block", new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.TERRACOTTA_BROWN).sound(SoundType.DRIPSTONE_BLOCK).requiresCorrectToolForDrops().strength(1.5F, 1.0F)));
-      CAVE_VINES_HEAD = register("cave_vines_head", new CaveVinesHeadBlock(BlockBehaviour.Properties.of(Material.PLANT, MaterialColor.COLOR_GREEN).randomTicks().noCollission().lightLevel(glowBerryBlockEmission(10)).instabreak().sound(SoundType.CAVE_VINES)));
-      CAVE_VINES_BODY = register("cave_vines_body", new CaveVinesBodyBlock(BlockBehaviour.Properties.of(Material.PLANT, MaterialColor.COLOR_GREEN).noCollission().lightLevel(glowBerryBlockEmission(14)).instabreak().sound(SoundType.CAVE_VINES)));
-      SPORE_BLOSSOM = register("spore_blossom", new SporeBlossomBlock(BlockBehaviour.Properties.of(Material.PLANT, MaterialColor.COLOR_GREEN).noCollission().sound(SoundType.SPORE_BLOSSOM)));
-      AZALEA = register("azalea", new AzaleaBlock(BlockBehaviour.Properties.of(Material.PLANT, MaterialColor.COLOR_GREEN).sound(SoundType.AZALEA).noOcclusion()));
-      FLOWERING_AZALEA = register("flowering_azalea", new AzaleaBlock(BlockBehaviour.Properties.of(Material.PLANT, MaterialColor.COLOR_GREEN).sound(SoundType.FLOWERING_AZALEA).noOcclusion()));
+      CAVE_VINES_HEAD = register("cave_vines_head", new CaveVinesHeadBlock(BlockBehaviour.Properties.of(Material.PLANT).randomTicks().noCollission().lightLevel(glowBerryBlockEmission(10)).instabreak().sound(SoundType.CAVE_VINES)));
+      CAVE_VINES_BODY = register("cave_vines_body", new CaveVinesBodyBlock(BlockBehaviour.Properties.of(Material.PLANT).noCollission().lightLevel(glowBerryBlockEmission(14)).instabreak().sound(SoundType.CAVE_VINES)));
+      SPORE_BLOSSOM = register("spore_blossom", new SporeBlossomBlock(BlockBehaviour.Properties.of(Material.PLANT).noCollission().sound(SoundType.SPORE_BLOSSOM)));
+      AZALEA = register("azalea", new AzaleaBlock(BlockBehaviour.Properties.of(Material.PLANT).sound(SoundType.AZALEA).noOcclusion()));
+      FLOWERING_AZALEA = register("flowering_azalea", new AzaleaBlock(BlockBehaviour.Properties.of(Material.PLANT).sound(SoundType.FLOWERING_AZALEA).noOcclusion()));
       MOSS_CARPET = register("moss_carpet", new CarpetBlock(BlockBehaviour.Properties.of(Material.PLANT, MaterialColor.COLOR_GREEN).strength(0.1F).sound(SoundType.MOSS_CARPET)));
       MOSS_BLOCK = register("moss_block", new MossBlock(BlockBehaviour.Properties.of(Material.PLANT, MaterialColor.COLOR_GREEN).strength(0.1F).sound(SoundType.MOSS)));
-      BIG_DRIPLEAF = register("big_dripleaf", new BigDripleafBlock(BlockBehaviour.Properties.of(Material.PLANT, MaterialColor.COLOR_GREEN).strength(0.1F).sound(SoundType.BIG_DRIPLEAF)));
-      BIG_DRIPLEAF_STEM = register("big_dripleaf_stem", new BigDripleafStemBlock(BlockBehaviour.Properties.of(Material.PLANT, MaterialColor.COLOR_GREEN).noCollission().strength(0.1F).sound(SoundType.BIG_DRIPLEAF)));
-      SMALL_DRIPLEAF = register("small_dripleaf", new SmallDripleafBlock(BlockBehaviour.Properties.of(Material.PLANT, MaterialColor.COLOR_GREEN).strength(0.1F).noCollission().instabreak().sound(SoundType.SMALL_DRIPLEAF)));
+      BIG_DRIPLEAF = register("big_dripleaf", new BigDripleafBlock(BlockBehaviour.Properties.of(Material.PLANT).strength(0.1F).sound(SoundType.BIG_DRIPLEAF)));
+      BIG_DRIPLEAF_STEM = register("big_dripleaf_stem", new BigDripleafStemBlock(BlockBehaviour.Properties.of(Material.PLANT).noCollission().strength(0.1F).sound(SoundType.BIG_DRIPLEAF)));
+      SMALL_DRIPLEAF = register("small_dripleaf", new SmallDripleafBlock(BlockBehaviour.Properties.of(Material.PLANT).strength(0.1F).noCollission().instabreak().sound(SoundType.SMALL_DRIPLEAF)));
       ROOTED_DIRT = register("rooted_dirt", new Block(BlockBehaviour.Properties.of(Material.DIRT, MaterialColor.DIRT).strength(0.1F).sound(SoundType.ROOTED_DIRT)));
       HANGING_ROOTS = register("hanging_roots", new HangingRootsBlock(BlockBehaviour.Properties.of(Material.DIRT, MaterialColor.DIRT).noCollission().instabreak().strength(0.1F).sound(SoundType.HANGING_ROOTS)));
-      DEEPSLATE = register("deepslate", new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.STONE).requiresCorrectToolForDrops().strength(3.0F, 6.0F).sound(SoundType.DEEPSLATE)));
+      DEEPSLATE = register("deepslate", new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.STONE).requiresCorrectToolForDrops().strength(3.0F, 6.0F).sound(SoundType.DEEPSLATE)));
       COBBLED_DEEPSLATE = register("cobbled_deepslate", new Block(BlockBehaviour.Properties.copy(DEEPSLATE)));
       COBBLED_DEEPSLATE_STAIRS = register("cobbled_deepslate_stairs", new StairBlock(COBBLED_DEEPSLATE.defaultBlockState(), BlockBehaviour.Properties.copy(COBBLED_DEEPSLATE)));
       COBBLED_DEEPSLATE_SLAB = register("cobbled_deepslate_slab", new SlabBlock(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.STONE).requiresCorrectToolForDrops().strength(3.5F, 6.0F)));
       COBBLED_DEEPSLATE_WALL = register("cobbled_deepslate_wall", new WallBlock(BlockBehaviour.Properties.copy(COBBLED_DEEPSLATE)));
       POLISHED_DEEPSLATE = register("polished_deepslate", new Block(BlockBehaviour.Properties.copy(COBBLED_DEEPSLATE).strength(3.5F, 6.0F).sound(SoundType.POLISHED_DEEPSLATE)));
@@ -1975,10 +1984,13 @@
       DEEPSLATE_BRICKS = register("deepslate_bricks", new Block(BlockBehaviour.Properties.copy(COBBLED_DEEPSLATE).strength(1.5F, 6.0F).sound(SoundType.DEEPSLATE_BRICKS)));
       DEEPSLATE_BRICK_STAIRS = register("deepslate_brick_stairs", new StairBlock(DEEPSLATE_BRICKS.defaultBlockState(), BlockBehaviour.Properties.copy(DEEPSLATE_BRICKS)));
       DEEPSLATE_BRICK_SLAB = register("deepslate_brick_slab", new SlabBlock(BlockBehaviour.Properties.copy(DEEPSLATE_BRICKS)));
       DEEPSLATE_BRICK_WALL = register("deepslate_brick_wall", new WallBlock(BlockBehaviour.Properties.copy(DEEPSLATE_BRICKS)));
       CHISELED_DEEPSLATE = register("chiseled_deepslate", new Block(BlockBehaviour.Properties.copy(COBBLED_DEEPSLATE).strength(1.5F, 6.0F).sound(SoundType.DEEPSLATE_BRICKS)));
+      CRACKED_DEEPSLATE_BRICKS = register("cracked_deepslate_bricks", new Block(BlockBehaviour.Properties.copy(DEEPSLATE_BRICKS)));
+      CRACKED_DEEPSLATE_TILES = register("cracked_deepslate_tiles", new Block(BlockBehaviour.Properties.copy(DEEPSLATE_TILES)));
+      INFESTED_DEEPSLATE = register("infested_deepslate", new InfestedBlock(DEEPSLATE, BlockBehaviour.Properties.of(Material.CLAY).strength(0.0F, 0.75F)));
       SMOOTH_BASALT = register("smooth_basalt", new Block(BlockBehaviour.Properties.copy(BASALT)));
       Iterator var0 = Registry.BLOCK.iterator();
 
       while(var0.hasNext()) {
          Block var1 = (Block)var0.next();
