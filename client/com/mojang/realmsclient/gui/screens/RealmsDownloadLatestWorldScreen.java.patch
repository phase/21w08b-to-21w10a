--- com/mojang/realmsclient/gui/screens/RealmsDownloadLatestWorldScreen.java
+++ com/mojang/realmsclient/gui/screens/RealmsDownloadLatestWorldScreen.java
@@ -167,11 +167,11 @@
    }
 
    private void drawProgressBar(PoseStack var1) {
       double var2 = Math.min((double)this.downloadStatus.bytesWritten / (double)this.downloadStatus.totalBytes, 1.0D);
       this.progress = String.format(Locale.ROOT, "%.1f", var2 * 100.0D);
-      RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+      RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
       RenderSystem.disableTexture();
       Tesselator var4 = Tesselator.getInstance();
       BufferBuilder var5 = var4.getBuilder();
       var5.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_COLOR);
       double var6 = (double)(this.width / 2 - 100);
@@ -219,72 +219,75 @@
    }
 
    private void downloadSave() {
       (new Thread(() -> {
          try {
-            if (!DOWNLOAD_LOCK.tryLock(1L, TimeUnit.SECONDS)) {
-               this.status = new TranslatableComponent("mco.download.failed");
-               return;
-            }
-
-            if (this.cancelled) {
-               this.downloadCancelled();
-               return;
-            }
-
-            this.status = new TranslatableComponent("mco.download.downloading", new Object[]{this.worldName});
-            FileDownload var1 = new FileDownload();
-            var1.contentLength(this.worldDownload.downloadLink);
-            var1.download(this.worldDownload, this.worldName, this.downloadStatus, this.minecraft.getLevelSource());
-
-            while(!var1.isFinished()) {
-               if (var1.isError()) {
-                  var1.cancel();
-                  this.errorMessage = new TranslatableComponent("mco.download.failed");
-                  this.cancelButton.setMessage(CommonComponents.GUI_DONE);
+            try {
+               if (!DOWNLOAD_LOCK.tryLock(1L, TimeUnit.SECONDS)) {
+                  this.status = new TranslatableComponent("mco.download.failed");
                   return;
                }
 
-               if (var1.isExtracting()) {
-                  if (!this.extracting) {
-                     this.status = new TranslatableComponent("mco.download.extracting");
-                  }
-
-                  this.extracting = true;
-               }
-
                if (this.cancelled) {
-                  var1.cancel();
                   this.downloadCancelled();
                   return;
                }
 
-               try {
-                  Thread.sleep(500L);
-               } catch (InterruptedException var8) {
-                  LOGGER.error("Failed to check Realms backup download status");
+               this.status = new TranslatableComponent("mco.download.downloading", new Object[]{this.worldName});
+               FileDownload var1 = new FileDownload();
+               var1.contentLength(this.worldDownload.downloadLink);
+               var1.download(this.worldDownload, this.worldName, this.downloadStatus, this.minecraft.getLevelSource());
+
+               while(!var1.isFinished()) {
+                  if (var1.isError()) {
+                     var1.cancel();
+                     this.errorMessage = new TranslatableComponent("mco.download.failed");
+                     this.cancelButton.setMessage(CommonComponents.GUI_DONE);
+                     return;
+                  }
+
+                  if (var1.isExtracting()) {
+                     if (!this.extracting) {
+                        this.status = new TranslatableComponent("mco.download.extracting");
+                     }
+
+                     this.extracting = true;
+                  }
+
+                  if (this.cancelled) {
+                     var1.cancel();
+                     this.downloadCancelled();
+                     return;
+                  }
+
+                  try {
+                     Thread.sleep(500L);
+                  } catch (InterruptedException var8) {
+                     LOGGER.error("Failed to check Realms backup download status");
+                  }
                }
+
+               this.finished = true;
+               this.status = new TranslatableComponent("mco.download.done");
+               this.cancelButton.setMessage(CommonComponents.GUI_DONE);
+               return;
+            } catch (InterruptedException var9) {
+               LOGGER.error("Could not acquire upload lock");
+            } catch (Exception var10) {
+               this.errorMessage = new TranslatableComponent("mco.download.failed");
+               var10.printStackTrace();
             }
 
-            this.finished = true;
-            this.status = new TranslatableComponent("mco.download.done");
-            this.cancelButton.setMessage(CommonComponents.GUI_DONE);
-         } catch (InterruptedException var9) {
-            LOGGER.error("Could not acquire upload lock");
-         } catch (Exception var10) {
-            this.errorMessage = new TranslatableComponent("mco.download.failed");
-            var10.printStackTrace();
          } finally {
             if (!DOWNLOAD_LOCK.isHeldByCurrentThread()) {
                return;
+            } else {
+               DOWNLOAD_LOCK.unlock();
+               this.showDots = false;
+               this.finished = true;
             }
-
-            DOWNLOAD_LOCK.unlock();
-            this.showDots = false;
-            this.finished = true;
          }
-
       })).start();
    }
 
    private void downloadCancelled() {
       this.status = new TranslatableComponent("mco.download.cancelled");
