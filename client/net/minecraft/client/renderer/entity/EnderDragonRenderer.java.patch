--- net/minecraft/client/renderer/entity/EnderDragonRenderer.java
+++ net/minecraft/client/renderer/entity/EnderDragonRenderer.java
@@ -52,12 +52,12 @@
       boolean var9 = var1.hurtTime > 0;
       this.model.prepareMobModel(var1, 0.0F, 0.0F, var3);
       VertexConsumer var20;
       if (var1.dragonDeathTime > 0) {
          float var10 = (float)var1.dragonDeathTime / 200.0F;
-         VertexConsumer var11 = var5.getBuffer(RenderType.dragonExplosionAlpha(DRAGON_EXPLODING_LOCATION, var10));
-         this.model.renderToBuffer(var4, var11, var6, OverlayTexture.NO_OVERLAY, 1.0F, 1.0F, 1.0F, 1.0F);
+         VertexConsumer var11 = var5.getBuffer(RenderType.dragonExplosionAlpha(DRAGON_EXPLODING_LOCATION));
+         this.model.renderToBuffer(var4, var11, var6, OverlayTexture.NO_OVERLAY, 1.0F, 1.0F, 1.0F, var10);
          VertexConsumer var12 = var5.getBuffer(DECAL);
          this.model.renderToBuffer(var4, var12, var6, OverlayTexture.pack(0.0F, var9), 1.0F, 1.0F, 1.0F, 1.0F);
       } else {
          var20 = var5.getBuffer(RENDER_TYPE);
          this.model.renderToBuffer(var4, var20, var6, OverlayTexture.pack(0.0F, var9), 1.0F, 1.0F, 1.0F, 1.0F);
@@ -286,38 +286,38 @@
             this.neck.z = var13;
             this.neck.x = var11;
             var12 = (float)((double)var12 + Math.sin((double)this.neck.xRot) * 10.0D);
             var13 = (float)((double)var13 - Math.cos((double)this.neck.yRot) * Math.cos((double)this.neck.xRot) * 10.0D);
             var11 = (float)((double)var11 - Math.sin((double)this.neck.yRot) * Math.cos((double)this.neck.xRot) * 10.0D);
-            this.neck.render(var1, var2, var3, var4);
+            this.neck.render(var1, var2, var3, var4, 1.0F, 1.0F, 1.0F, var8);
          }
 
          this.head.y = var12;
          this.head.z = var13;
          this.head.x = var11;
          double[] var23 = this.entity.getLatencyPos(0, this.a);
          this.head.yRot = Mth.rotWrap(var23[0] - var15[0]) * 0.017453292F;
          this.head.xRot = Mth.rotWrap((double)this.entity.getHeadPartYOffset(6, var15, var23)) * 0.017453292F * 1.5F * 5.0F;
          this.head.zRot = -Mth.rotWrap(var23[0] - (double)var17) * 0.017453292F;
-         this.head.render(var1, var2, var3, var4);
+         this.head.render(var1, var2, var3, var4, 1.0F, 1.0F, 1.0F, var8);
          var1.pushPose();
          var1.translate(0.0D, 1.0D, 0.0D);
          var1.mulPose(Vector3f.ZP.rotationDegrees(-var16 * 1.5F));
          var1.translate(0.0D, -1.0D, 0.0D);
          this.body.zRot = 0.0F;
-         this.body.render(var1, var2, var3, var4);
+         this.body.render(var1, var2, var3, var4, 1.0F, 1.0F, 1.0F, var8);
          float var24 = var9 * 6.2831855F;
          this.leftWing.xRot = 0.125F - (float)Math.cos((double)var24) * 0.2F;
          this.leftWing.yRot = -0.25F;
          this.leftWing.zRot = -((float)(Math.sin((double)var24) + 0.125D)) * 0.8F;
          this.leftWingTip.zRot = (float)(Math.sin((double)(var24 + 2.0F)) + 0.5D) * 0.75F;
          this.rightWing.xRot = this.leftWing.xRot;
          this.rightWing.yRot = -this.leftWing.yRot;
          this.rightWing.zRot = -this.leftWing.zRot;
          this.rightWingTip.zRot = -this.leftWingTip.zRot;
-         this.renderSide(var1, var2, var3, var4, var10, this.leftWing, this.leftFrontLeg, this.leftFrontLegTip, this.leftFrontFoot, this.leftRearLeg, this.leftRearLegTip, this.leftRearFoot);
-         this.renderSide(var1, var2, var3, var4, var10, this.rightWing, this.rightFrontLeg, this.rightFrontLegTip, this.rightFrontFoot, this.rightRearLeg, this.rightRearLegTip, this.rightRearFoot);
+         this.renderSide(var1, var2, var3, var4, var10, this.leftWing, this.leftFrontLeg, this.leftFrontLegTip, this.leftFrontFoot, this.leftRearLeg, this.leftRearLegTip, this.leftRearFoot, var8);
+         this.renderSide(var1, var2, var3, var4, var10, this.rightWing, this.rightFrontLeg, this.rightFrontLegTip, this.rightFrontFoot, this.rightRearLeg, this.rightRearLegTip, this.rightRearFoot, var8);
          var1.popPose();
          var21 = -((float)Math.sin((double)(var9 * 6.2831855F))) * 0.0F;
          var18 = var9 * 6.2831855F;
          var12 = 10.0F;
          var13 = 60.0F;
@@ -334,24 +334,24 @@
             this.neck.z = var13;
             this.neck.x = var11;
             var12 = (float)((double)var12 + Math.sin((double)this.neck.xRot) * 10.0D);
             var13 = (float)((double)var13 - Math.cos((double)this.neck.yRot) * Math.cos((double)this.neck.xRot) * 10.0D);
             var11 = (float)((double)var11 - Math.sin((double)this.neck.yRot) * Math.cos((double)this.neck.xRot) * 10.0D);
-            this.neck.render(var1, var2, var3, var4);
+            this.neck.render(var1, var2, var3, var4, 1.0F, 1.0F, 1.0F, var8);
          }
 
          var1.popPose();
       }
 
-      private void renderSide(PoseStack var1, VertexConsumer var2, int var3, int var4, float var5, ModelPart var6, ModelPart var7, ModelPart var8, ModelPart var9, ModelPart var10, ModelPart var11, ModelPart var12) {
+      private void renderSide(PoseStack var1, VertexConsumer var2, int var3, int var4, float var5, ModelPart var6, ModelPart var7, ModelPart var8, ModelPart var9, ModelPart var10, ModelPart var11, ModelPart var12, float var13) {
          var10.xRot = 1.0F + var5 * 0.1F;
          var11.xRot = 0.5F + var5 * 0.1F;
          var12.xRot = 0.75F + var5 * 0.1F;
          var7.xRot = 1.3F + var5 * 0.1F;
          var8.xRot = -0.5F - var5 * 0.1F;
          var9.xRot = 0.75F + var5 * 0.1F;
-         var6.render(var1, var2, var3, var4);
-         var7.render(var1, var2, var3, var4);
-         var10.render(var1, var2, var3, var4);
+         var6.render(var1, var2, var3, var4, 1.0F, 1.0F, 1.0F, var13);
+         var7.render(var1, var2, var3, var4, 1.0F, 1.0F, 1.0F, var13);
+         var10.render(var1, var2, var3, var4, 1.0F, 1.0F, 1.0F, var13);
       }
    }
 }
