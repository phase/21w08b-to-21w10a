--- net/minecraft/client/renderer/entity/ItemRenderer.java
+++ net/minecraft/client/renderer/entity/ItemRenderer.java
@@ -3,10 +3,11 @@
 import com.google.common.collect.Sets;
 import com.mojang.blaze3d.platform.GlStateManager;
 import com.mojang.blaze3d.platform.Lighting;
 import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.blaze3d.vertex.BufferBuilder;
+import com.mojang.blaze3d.vertex.BufferUploader;
 import com.mojang.blaze3d.vertex.DefaultVertexFormat;
 import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.blaze3d.vertex.SheetedDecalTextureGenerator;
 import com.mojang.blaze3d.vertex.Tesselator;
 import com.mojang.blaze3d.vertex.VertexConsumer;
@@ -24,10 +25,11 @@
 import net.minecraft.client.color.item.ItemColors;
 import net.minecraft.client.gui.Font;
 import net.minecraft.client.multiplayer.ClientLevel;
 import net.minecraft.client.player.LocalPlayer;
 import net.minecraft.client.renderer.BlockEntityWithoutLevelRenderer;
+import net.minecraft.client.renderer.GameRenderer;
 import net.minecraft.client.renderer.ItemBlockRenderTypes;
 import net.minecraft.client.renderer.ItemModelShaper;
 import net.minecraft.client.renderer.MultiBufferSource;
 import net.minecraft.client.renderer.RenderType;
 import net.minecraft.client.renderer.Sheets;
@@ -103,19 +105,21 @@
 
    public void render(ItemStack var1, ItemTransforms.TransformType var2, boolean var3, PoseStack var4, MultiBufferSource var5, int var6, int var7, BakedModel var8) {
       if (!var1.isEmpty()) {
          var4.pushPose();
          boolean var9 = var2 == ItemTransforms.TransformType.GUI || var2 == ItemTransforms.TransformType.GROUND || var2 == ItemTransforms.TransformType.FIXED;
-         if (var1.is(Items.TRIDENT) && var9) {
-            var8 = this.itemModelShaper.getModelManager().getModel(new ModelResourceLocation("minecraft:trident#inventory"));
+         if (var9) {
+            if (var1.is(Items.TRIDENT)) {
+               var8 = this.itemModelShaper.getModelManager().getModel(new ModelResourceLocation("minecraft:trident#inventory"));
+            } else if (var1.is(Items.SPYGLASS)) {
+               var8 = this.itemModelShaper.getModelManager().getModel(new ModelResourceLocation("minecraft:spyglass#inventory"));
+            }
          }
 
          var8.getTransforms().getTransform(var2).apply(var3, var4);
          var4.translate(-0.5D, -0.5D, -0.5D);
-         if (var8.isCustomRenderer() || var1.is(Items.TRIDENT) && !var9) {
-            this.blockEntityRenderer.renderByItem(var1, var2, var4, var5, var6, var7);
-         } else {
+         if (!var8.isCustomRenderer() && (!var1.is(Items.TRIDENT) || var9)) {
             boolean var10;
             if (var2 != ItemTransforms.TransformType.GUI && !var2.firstPerson() && var1.getItem() instanceof BlockItem) {
                Block var11 = ((BlockItem)var1.getItem()).getBlock();
                var10 = !(var11 instanceof HalfTransparentBlock) && !(var11 instanceof StainedGlassPaneBlock);
             } else {
@@ -145,10 +149,12 @@
             } else {
                var12 = getFoilBuffer(var5, var14, true, var1.hasFoil());
             }
 
             this.renderModelLists(var8, var1, var6, var7, var4, var12);
+         } else {
+            this.blockEntityRenderer.renderByItem(var1, var2, var4, var5, var6, var7);
          }
 
          var4.popPose();
       }
    }
@@ -199,10 +205,12 @@
 
    public BakedModel getModel(ItemStack var1, @Nullable Level var2, @Nullable LivingEntity var3, int var4) {
       BakedModel var5;
       if (var1.is(Items.TRIDENT)) {
          var5 = this.itemModelShaper.getModelManager().getModel(new ModelResourceLocation("minecraft:trident_in_hand#inventory"));
+      } else if (var1.is(Items.SPYGLASS)) {
+         var5 = this.itemModelShaper.getModelManager().getModel(new ModelResourceLocation("minecraft:spyglass_in_hand#inventory"));
       } else {
          var5 = this.itemModelShaper.getItemModel(var1);
       }
 
       ClientLevel var6 = var2 instanceof ClientLevel ? (ClientLevel)var2 : null;
@@ -224,40 +232,38 @@
    public void renderGuiItem(ItemStack var1, int var2, int var3) {
       this.renderGuiItem(var1, var2, var3, this.getModel(var1, (Level)null, (LivingEntity)null, 0));
    }
 
    protected void renderGuiItem(ItemStack var1, int var2, int var3, BakedModel var4) {
-      RenderSystem.pushMatrix();
-      this.textureManager.bind(TextureAtlas.LOCATION_BLOCKS);
       this.textureManager.getTexture(TextureAtlas.LOCATION_BLOCKS).setFilter(false, false);
-      RenderSystem.enableRescaleNormal();
-      RenderSystem.enableAlphaTest();
-      RenderSystem.defaultAlphaFunc();
+      RenderSystem.setShaderTexture(0, TextureAtlas.LOCATION_BLOCKS);
       RenderSystem.enableBlend();
       RenderSystem.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
-      RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-      RenderSystem.translatef((float)var2, (float)var3, 100.0F + this.blitOffset);
-      RenderSystem.translatef(8.0F, 8.0F, 0.0F);
-      RenderSystem.scalef(1.0F, -1.0F, 1.0F);
-      RenderSystem.scalef(16.0F, 16.0F, 16.0F);
-      PoseStack var5 = new PoseStack();
-      MultiBufferSource.BufferSource var6 = Minecraft.getInstance().renderBuffers().bufferSource();
-      boolean var7 = !var4.usesBlockLight();
-      if (var7) {
+      RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
+      PoseStack var5 = RenderSystem.getModelViewStack();
+      var5.pushPose();
+      var5.translate((double)var2, (double)var3, (double)(100.0F + this.blitOffset));
+      var5.translate(8.0D, 8.0D, 0.0D);
+      var5.scale(1.0F, -1.0F, 1.0F);
+      var5.scale(16.0F, 16.0F, 16.0F);
+      RenderSystem.applyModelViewMatrix();
+      PoseStack var6 = new PoseStack();
+      MultiBufferSource.BufferSource var7 = Minecraft.getInstance().renderBuffers().bufferSource();
+      boolean var8 = !var4.usesBlockLight();
+      if (var8) {
          Lighting.setupForFlatItems();
       }
 
-      this.render(var1, ItemTransforms.TransformType.GUI, false, var5, var6, 15728880, OverlayTexture.NO_OVERLAY, var4);
-      var6.endBatch();
+      this.render(var1, ItemTransforms.TransformType.GUI, false, var6, var7, 15728880, OverlayTexture.NO_OVERLAY, var4);
+      var7.endBatch();
       RenderSystem.enableDepthTest();
-      if (var7) {
+      if (var8) {
          Lighting.setupFor3DItems();
       }
 
-      RenderSystem.disableAlphaTest();
-      RenderSystem.disableRescaleNormal();
-      RenderSystem.popMatrix();
+      var5.popPose();
+      RenderSystem.applyModelViewMatrix();
    }
 
    public void renderAndDecorateItem(ItemStack var1, int var2, int var3) {
       this.tryRenderGuiItem(Minecraft.getInstance().player, var1, var2, var3, 0);
    }
@@ -318,20 +324,18 @@
          }
 
          if (var2.isBarVisible()) {
             RenderSystem.disableDepthTest();
             RenderSystem.disableTexture();
-            RenderSystem.disableAlphaTest();
             RenderSystem.disableBlend();
             Tesselator var11 = Tesselator.getInstance();
             BufferBuilder var13 = var11.getBuilder();
             int var9 = var2.getBarWidth();
             int var10 = var2.getBarColor();
             this.fillRect(var13, var3 + 2, var4 + 13, 13, 2, 0, 0, 0, 255);
             this.fillRect(var13, var3 + 2, var4 + 13, var9, 1, var10 >> 16 & 255, var10 >> 8 & 255, var10 & 255, 255);
             RenderSystem.enableBlend();
-            RenderSystem.enableAlphaTest();
             RenderSystem.enableTexture();
             RenderSystem.enableDepthTest();
          }
 
          LocalPlayer var12 = Minecraft.getInstance().player;
@@ -350,16 +354,18 @@
 
       }
    }
 
    private void fillRect(BufferBuilder var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8, int var9) {
+      RenderSystem.setShader(GameRenderer::getPositionColorShader);
       var1.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_COLOR);
       var1.vertex((double)(var2 + 0), (double)(var3 + 0), 0.0D).color(var6, var7, var8, var9).endVertex();
       var1.vertex((double)(var2 + 0), (double)(var3 + var5), 0.0D).color(var6, var7, var8, var9).endVertex();
       var1.vertex((double)(var2 + var4), (double)(var3 + var5), 0.0D).color(var6, var7, var8, var9).endVertex();
       var1.vertex((double)(var2 + var4), (double)(var3 + 0), 0.0D).color(var6, var7, var8, var9).endVertex();
-      Tesselator.getInstance().end();
+      var1.end();
+      BufferUploader.end(var1);
    }
 
    public void onResourceManagerReload(ResourceManager var1) {
       this.itemModelShaper.rebuildCache();
    }
