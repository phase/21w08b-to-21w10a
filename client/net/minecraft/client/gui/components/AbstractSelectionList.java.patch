--- net/minecraft/client/gui/components/AbstractSelectionList.java
+++ net/minecraft/client/gui/components/AbstractSelectionList.java
@@ -16,13 +16,16 @@
 import javax.annotation.Nullable;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.GuiComponent;
 import net.minecraft.client.gui.components.events.AbstractContainerEventHandler;
 import net.minecraft.client.gui.components.events.GuiEventListener;
+import net.minecraft.client.renderer.GameRenderer;
+import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.Mth;
 
 public abstract class AbstractSelectionList<E extends AbstractSelectionList.Entry<E>> extends AbstractContainerEventHandler implements Widget {
+   public static final ResourceLocation WHITE_TEXTURE_LOCATION = new ResourceLocation("textures/misc/white.png");
    protected final Minecraft minecraft;
    protected final int itemHeight;
    private final List<E> children = new AbstractSelectionList.TrackedList();
    protected int width;
    protected int height;
@@ -166,12 +169,13 @@
       int var5 = this.getScrollbarPosition();
       int var6 = var5 + 6;
       Tesselator var7 = Tesselator.getInstance();
       BufferBuilder var8 = var7.getBuilder();
       if (this.renderBackground) {
-         this.minecraft.getTextureManager().bind(GuiComponent.BACKGROUND_LOCATION);
-         RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+         RenderSystem.setShader(GameRenderer::getPositionTexColorShader);
+         RenderSystem.setShaderTexture(0, GuiComponent.BACKGROUND_LOCATION);
+         RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
          float var9 = 32.0F;
          var8.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_TEX_COLOR);
          var8.vertex((double)this.x0, (double)this.y1, 0.0D).uv((float)this.x0 / 32.0F, (float)(this.y1 + (int)this.getScrollAmount()) / 32.0F).color(32, 32, 32, 255).endVertex();
          var8.vertex((double)this.x1, (double)this.y1, 0.0D).uv((float)this.x1 / 32.0F, (float)(this.y1 + (int)this.getScrollAmount()) / 32.0F).color(32, 32, 32, 255).endVertex();
          var8.vertex((double)this.x1, (double)this.y0, 0.0D).uv((float)this.x1 / 32.0F, (float)(this.y0 + (int)this.getScrollAmount()) / 32.0F).color(32, 32, 32, 255).endVertex();
@@ -185,11 +189,12 @@
          this.renderHeader(var1, var14, var10, var7);
       }
 
       this.renderList(var1, var14, var10, var2, var3, var4);
       if (this.renderTopAndBottom) {
-         this.minecraft.getTextureManager().bind(GuiComponent.BACKGROUND_LOCATION);
+         RenderSystem.setShader(GameRenderer::getPositionTexColorShader);
+         RenderSystem.setShaderTexture(0, GuiComponent.BACKGROUND_LOCATION);
          RenderSystem.enableDepthTest();
          RenderSystem.depthFunc(519);
          float var11 = 32.0F;
          boolean var12 = true;
          var8.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_TEX_COLOR);
@@ -204,13 +209,13 @@
          var7.end();
          RenderSystem.depthFunc(515);
          RenderSystem.disableDepthTest();
          RenderSystem.enableBlend();
          RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ZERO, GlStateManager.DestFactor.ONE);
-         RenderSystem.disableAlphaTest();
-         RenderSystem.shadeModel(7425);
          RenderSystem.disableTexture();
+         RenderSystem.setShader(GameRenderer::getPositionTexColorShader);
+         RenderSystem.setShaderTexture(0, WHITE_TEXTURE_LOCATION);
          boolean var13 = true;
          var8.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_TEX_COLOR);
          var8.vertex((double)this.x0, (double)(this.y0 + 4), 0.0D).uv(0.0F, 1.0F).color(0, 0, 0, 0).endVertex();
          var8.vertex((double)this.x1, (double)(this.y0 + 4), 0.0D).uv(1.0F, 1.0F).color(0, 0, 0, 0).endVertex();
          var8.vertex((double)this.x1, (double)this.y0, 0.0D).uv(1.0F, 0.0F).color(0, 0, 0, 255).endVertex();
@@ -248,12 +253,10 @@
          var7.end();
       }
 
       this.renderDecorations(var1, var2, var3);
       RenderSystem.enableTexture();
-      RenderSystem.shadeModel(7424);
-      RenderSystem.enableAlphaTest();
       RenderSystem.disableBlend();
    }
 
    protected void centerScrollOn(E var1) {
       this.setScrollAmount((double)(this.children().indexOf(var1) * this.itemHeight + this.itemHeight / 2 - (this.y1 - this.y0) / 2));
@@ -426,19 +429,20 @@
             int var17;
             if (this.renderSelection && this.isSelectedItem(var10)) {
                var17 = this.x0 + this.width / 2 - var16 / 2;
                int var18 = this.x0 + this.width / 2 + var16 / 2;
                RenderSystem.disableTexture();
+               RenderSystem.setShader(GameRenderer::getPositionShader);
                float var19 = this.isFocused() ? 1.0F : 0.5F;
-               RenderSystem.color4f(var19, var19, var19, 1.0F);
+               RenderSystem.setShaderColor(var19, var19, var19, 1.0F);
                var9.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION);
                var9.vertex((double)var17, (double)(var13 + var14 + 2), 0.0D).endVertex();
                var9.vertex((double)var18, (double)(var13 + var14 + 2), 0.0D).endVertex();
                var9.vertex((double)var18, (double)(var13 - 2), 0.0D).endVertex();
                var9.vertex((double)var17, (double)(var13 - 2), 0.0D).endVertex();
                var8.end();
-               RenderSystem.color4f(0.0F, 0.0F, 0.0F, 1.0F);
+               RenderSystem.setShaderColor(0.0F, 0.0F, 0.0F, 1.0F);
                var9.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION);
                var9.vertex((double)(var17 + 1), (double)(var13 + var14 + 1), 0.0D).endVertex();
                var9.vertex((double)(var18 - 1), (double)(var13 + var14 + 1), 0.0D).endVertex();
                var9.vertex((double)(var18 - 1), (double)(var13 - 1), 0.0D).endVertex();
                var9.vertex((double)(var17 + 1), (double)(var13 - 1), 0.0D).endVertex();
