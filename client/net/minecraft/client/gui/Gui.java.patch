--- net/minecraft/client/gui/Gui.java
+++ net/minecraft/client/gui/Gui.java
@@ -10,10 +10,11 @@
 import com.mojang.blaze3d.vertex.DefaultVertexFormat;
 import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.blaze3d.vertex.Tesselator;
 import com.mojang.blaze3d.vertex.VertexFormat;
 import com.mojang.datafixers.util.Pair;
+import com.mojang.math.Vector3f;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
@@ -37,10 +38,11 @@
 import net.minecraft.client.gui.components.PlayerTabOverlay;
 import net.minecraft.client.gui.components.SubtitleOverlay;
 import net.minecraft.client.gui.components.spectator.SpectatorGui;
 import net.minecraft.client.gui.screens.inventory.AbstractContainerScreen;
 import net.minecraft.client.multiplayer.ClientLevel;
+import net.minecraft.client.renderer.GameRenderer;
 import net.minecraft.client.renderer.entity.ItemRenderer;
 import net.minecraft.client.renderer.texture.TextureAtlas;
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.minecraft.client.resources.MobEffectTextureManager;
 import net.minecraft.core.BlockPos;
@@ -194,21 +196,22 @@
       } else if (!this.minecraft.options.hideGui) {
          this.renderHotbar(var2, var1);
       }
 
       if (!this.minecraft.options.hideGui) {
-         RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-         this.minecraft.getTextureManager().bind(GUI_ICONS_LOCATION);
+         RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
+         RenderSystem.setShader(GameRenderer::getPositionTexShader);
+         RenderSystem.setShaderTexture(0, GUI_ICONS_LOCATION);
          RenderSystem.enableBlend();
-         RenderSystem.enableAlphaTest();
          this.renderCrosshair(var1);
+         RenderSystem.setShader(GameRenderer::getPositionTexShader);
          RenderSystem.defaultBlendFunc();
          this.minecraft.getProfiler().push("bossHealth");
          this.bossOverlay.render(var1);
          this.minecraft.getProfiler().pop();
-         RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-         this.minecraft.getTextureManager().bind(GUI_ICONS_LOCATION);
+         RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
+         RenderSystem.setShaderTexture(0, GUI_ICONS_LOCATION);
          if (this.minecraft.gameMode.canHurtPlayer()) {
             this.renderPlayerHealth(var1);
          }
 
          this.renderVehicleHealth(var1);
@@ -230,23 +233,21 @@
       int var8;
       float var12;
       if (this.minecraft.player.getSleepTimer() > 0) {
          this.minecraft.getProfiler().push("sleep");
          RenderSystem.disableDepthTest();
-         RenderSystem.disableAlphaTest();
          var12 = (float)this.minecraft.player.getSleepTimer();
          float var7 = var12 / 100.0F;
          if (var7 > 1.0F) {
             var7 = 1.0F - (var12 - 100.0F) / 10.0F;
          }
 
          var8 = (int)(220.0F * var7) << 24 | 1052704;
          fill(var1, 0, 0, this.screenWidth, this.screenHeight, var8);
-         RenderSystem.enableAlphaTest();
          RenderSystem.enableDepthTest();
          this.minecraft.getProfiler().pop();
-         RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+         RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
       }
 
       if (this.minecraft.isDemo()) {
          this.renderDemoOverlay(var1);
       }
@@ -267,12 +268,12 @@
             if (var14 > 255) {
                var14 = 255;
             }
 
             if (var14 > 8) {
-               RenderSystem.pushMatrix();
-               RenderSystem.translatef((float)(this.screenWidth / 2), (float)(this.screenHeight - 68), 0.0F);
+               var1.pushPose();
+               var1.translate((double)(this.screenWidth / 2), (double)(this.screenHeight - 68), 0.0D);
                RenderSystem.enableBlend();
                RenderSystem.defaultBlendFunc();
                var8 = 16777215;
                if (this.animateOverlayMessageColor) {
                   var8 = Mth.hsvToRgb(var12 / 50.0F, 0.7F, 0.6F) & 16777215;
@@ -281,11 +282,11 @@
                var9 = var14 << 24 & -16777216;
                var10 = var3.width((FormattedText)this.overlayMessageString);
                this.drawBackdrop(var1, var3, -4, var10, 16777215 | var9);
                var3.draw(var1, this.overlayMessageString, (float)(-var10 / 2), -4.0F, var8 | var9);
                RenderSystem.disableBlend();
-               RenderSystem.popMatrix();
+               var1.popPose();
             }
 
             this.minecraft.getProfiler().pop();
          }
 
@@ -302,32 +303,32 @@
                var14 = (int)(var12 * 255.0F / (float)this.titleFadeOutTime);
             }
 
             var14 = Mth.clamp(var14, 0, 255);
             if (var14 > 8) {
-               RenderSystem.pushMatrix();
-               RenderSystem.translatef((float)(this.screenWidth / 2), (float)(this.screenHeight / 2), 0.0F);
+               var1.pushPose();
+               var1.translate((double)(this.screenWidth / 2), (double)(this.screenHeight / 2), 0.0D);
                RenderSystem.enableBlend();
                RenderSystem.defaultBlendFunc();
-               RenderSystem.pushMatrix();
-               RenderSystem.scalef(4.0F, 4.0F, 4.0F);
+               var1.pushPose();
+               var1.scale(4.0F, 4.0F, 4.0F);
                var8 = var14 << 24 & -16777216;
                var9 = var3.width((FormattedText)this.title);
                this.drawBackdrop(var1, var3, -10, var9, 16777215 | var8);
                var3.drawShadow(var1, this.title, (float)(-var9 / 2), -10.0F, 16777215 | var8);
-               RenderSystem.popMatrix();
+               var1.popPose();
                if (this.subtitle != null) {
-                  RenderSystem.pushMatrix();
-                  RenderSystem.scalef(2.0F, 2.0F, 2.0F);
+                  var1.pushPose();
+                  var1.scale(2.0F, 2.0F, 2.0F);
                   var10 = var3.width((FormattedText)this.subtitle);
                   this.drawBackdrop(var1, var3, 5, var10, 16777215 | var8);
                   var3.drawShadow(var1, this.subtitle, (float)(-var10 / 2), 5.0F, 16777215 | var8);
-                  RenderSystem.popMatrix();
+                  var1.popPose();
                }
 
                RenderSystem.disableBlend();
-               RenderSystem.popMatrix();
+               var1.popPose();
             }
 
             this.minecraft.getProfiler().pop();
          }
 
@@ -347,28 +348,26 @@
             this.displayScoreboardSidebar(var1, var17);
          }
 
          RenderSystem.enableBlend();
          RenderSystem.defaultBlendFunc();
-         RenderSystem.disableAlphaTest();
-         RenderSystem.pushMatrix();
-         RenderSystem.translatef(0.0F, (float)(this.screenHeight - 48), 0.0F);
+         var1.pushPose();
+         var1.translate(0.0D, (double)(this.screenHeight - 48), 0.0D);
          this.minecraft.getProfiler().push("chat");
          this.chat.render(var1, this.tickCount);
          this.minecraft.getProfiler().pop();
-         RenderSystem.popMatrix();
+         var1.popPose();
          var17 = var13.getDisplayObjective(0);
          if (!this.minecraft.options.keyPlayerList.isDown() || this.minecraft.isLocalServer() && this.minecraft.player.connection.getOnlinePlayers().size() <= 1 && var17 == null) {
             this.tabList.setVisible(false);
          } else {
             this.tabList.setVisible(true);
             this.tabList.render(var1, this.screenWidth, var13, var17);
          }
       }
 
-      RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-      RenderSystem.enableAlphaTest();
+      RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
    }
 
    private void drawBackdrop(PoseStack var1, Font var2, int var3, int var4, int var5) {
       int var6 = this.minecraft.options.getBackgroundColor(0.0F);
       if (var6 != 0) {
@@ -385,18 +384,21 @@
    private void renderCrosshair(PoseStack var1) {
       Options var2 = this.minecraft.options;
       if (var2.getCameraType().isFirstPerson()) {
          if (this.minecraft.gameMode.getPlayerMode() != GameType.SPECTATOR || this.canRenderCrosshairForSpectator(this.minecraft.hitResult)) {
             if (var2.renderDebug && !var2.hideGui && !this.minecraft.player.isReducedDebugInfo() && !var2.reducedDebugInfo) {
-               RenderSystem.pushMatrix();
-               RenderSystem.translatef((float)(this.screenWidth / 2), (float)(this.screenHeight / 2), (float)this.getBlitOffset());
                Camera var9 = this.minecraft.gameRenderer.getMainCamera();
-               RenderSystem.rotatef(var9.getXRot(), -1.0F, 0.0F, 0.0F);
-               RenderSystem.rotatef(var9.getYRot(), 0.0F, 1.0F, 0.0F);
-               RenderSystem.scalef(-1.0F, -1.0F, -1.0F);
+               PoseStack var10 = RenderSystem.getModelViewStack();
+               var10.pushPose();
+               var10.translate((double)(this.screenWidth / 2), (double)(this.screenHeight / 2), (double)this.getBlitOffset());
+               var10.mulPose(Vector3f.XN.rotationDegrees(var9.getXRot()));
+               var10.mulPose(Vector3f.YP.rotationDegrees(var9.getYRot()));
+               var10.scale(-1.0F, -1.0F, -1.0F);
+               RenderSystem.applyModelViewMatrix();
                RenderSystem.renderCrosshair(10);
-               RenderSystem.popMatrix();
+               var10.popPose();
+               RenderSystem.applyModelViewMatrix();
             } else {
                RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.ONE_MINUS_DST_COLOR, GlStateManager.DestFactor.ONE_MINUS_SRC_COLOR, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
                boolean var3 = true;
                this.blit(var1, (this.screenWidth - 15) / 2, (this.screenHeight - 15) / 2, 0, 0, 15, 15);
                if (this.minecraft.options.attackIndicator == AttackIndicatorStatus.CROSSHAIR) {
@@ -443,11 +445,11 @@
          RenderSystem.enableBlend();
          int var3 = 0;
          int var4 = 0;
          MobEffectTextureManager var5 = this.minecraft.getMobEffectTextures();
          ArrayList var6 = Lists.newArrayListWithExpectedSize(var2.size());
-         this.minecraft.getTextureManager().bind(AbstractContainerScreen.INVENTORY_LOCATION);
+         RenderSystem.setShaderTexture(0, AbstractContainerScreen.INVENTORY_LOCATION);
          Iterator var7 = Ordering.natural().reverse().sortedCopy(var2).iterator();
 
          while(var7.hasNext()) {
             MobEffectInstance var8 = (MobEffectInstance)var7.next();
             MobEffect var9 = var8.getEffect();
@@ -465,11 +467,11 @@
                   ++var4;
                   var10 -= 25 * var4;
                   var11 += 26;
                }
 
-               RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+               RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
                float var12 = 1.0F;
                if (var8.isAmbient()) {
                   this.blit(var1, var10, var11, 165, 166, 24, 24);
                } else {
                   this.blit(var1, var10, var11, 141, 166, 24, 24);
@@ -479,26 +481,27 @@
                   }
                }
 
                TextureAtlasSprite var17 = var5.get(var9);
                var6.add(() -> {
-                  this.minecraft.getTextureManager().bind(var17.atlas().location());
-                  RenderSystem.color4f(1.0F, 1.0F, 1.0F, var12);
+                  RenderSystem.setShaderTexture(0, var17.atlas().location());
+                  RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, var12);
                   blit(var1, var10 + 3, var11 + 3, this.getBlitOffset(), 18, 18, var17);
                });
             }
          }
 
          var6.forEach(Runnable::run);
       }
    }
 
-   protected void renderHotbar(float var1, PoseStack var2) {
+   private void renderHotbar(float var1, PoseStack var2) {
       Player var3 = this.getCameraPlayer();
       if (var3 != null) {
-         RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-         this.minecraft.getTextureManager().bind(WIDGETS_LOCATION);
+         RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
+         RenderSystem.setShader(GameRenderer::getPositionTexShader);
+         RenderSystem.setShaderTexture(0, WIDGETS_LOCATION);
          ItemStack var4 = var3.getOffhandItem();
          HumanoidArm var5 = var3.getMainArm().getOpposite();
          int var6 = this.screenWidth / 2;
          int var7 = this.getBlitOffset();
          boolean var8 = true;
@@ -513,11 +516,10 @@
                this.blit(var2, var6 + 91, this.screenHeight - 23, 53, 22, 29, 24);
             }
          }
 
          this.setBlitOffset(var7);
-         RenderSystem.enableRescaleNormal();
          RenderSystem.enableBlend();
          RenderSystem.defaultBlendFunc();
          int var10 = 1;
 
          int var11;
@@ -545,26 +547,25 @@
                var13 = var6 + 91 + 6;
                if (var5 == HumanoidArm.RIGHT) {
                   var13 = var6 - 91 - 22;
                }
 
-               this.minecraft.getTextureManager().bind(GuiComponent.GUI_ICONS_LOCATION);
+               RenderSystem.setShaderTexture(0, GuiComponent.GUI_ICONS_LOCATION);
                int var14 = (int)(var15 * 19.0F);
-               RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+               RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
                this.blit(var2, var13, var12, 0, 94, 18, 18);
                this.blit(var2, var13, var12 + 18 - var14, 18, 112 - var14, 18, var14);
             }
          }
 
-         RenderSystem.disableRescaleNormal();
          RenderSystem.disableBlend();
       }
    }
 
    public void renderJumpMeter(PoseStack var1, int var2) {
       this.minecraft.getProfiler().push("jumpBar");
-      this.minecraft.getTextureManager().bind(GuiComponent.GUI_ICONS_LOCATION);
+      RenderSystem.setShaderTexture(0, GuiComponent.GUI_ICONS_LOCATION);
       float var3 = this.minecraft.player.getJumpRidingScale();
       boolean var4 = true;
       int var5 = (int)(var3 * 183.0F);
       int var6 = this.screenHeight - 32 + 3;
       this.blit(var1, var2, var6, 0, 84, 182, 5);
@@ -575,11 +576,11 @@
       this.minecraft.getProfiler().pop();
    }
 
    public void renderExperienceBar(PoseStack var1, int var2) {
       this.minecraft.getProfiler().push("expBar");
-      this.minecraft.getTextureManager().bind(GuiComponent.GUI_ICONS_LOCATION);
+      RenderSystem.setShaderTexture(0, GuiComponent.GUI_ICONS_LOCATION);
       int var3 = this.minecraft.player.getXpNeededForNextLevel();
       int var5;
       int var6;
       if (var3 > 0) {
          boolean var4 = true;
@@ -626,21 +627,19 @@
          if (var6 > 255) {
             var6 = 255;
          }
 
          if (var6 > 0) {
-            RenderSystem.pushMatrix();
             RenderSystem.enableBlend();
             RenderSystem.defaultBlendFunc();
             int var10001 = var4 - 2;
             int var10002 = var5 - 2;
             int var10003 = var4 + var3 + 2;
             this.getFont().getClass();
             fill(var1, var10001, var10002, var10003, var5 + 9 + 2, this.minecraft.options.getBackgroundColor(0));
             this.getFont().drawShadow(var1, (Component)var2, (float)var4, (float)var5, 16777215 + (var6 << 24));
             RenderSystem.disableBlend();
-            RenderSystem.popMatrix();
          }
       }
 
       this.minecraft.getProfiler().pop();
    }
@@ -989,33 +988,30 @@
 
    private void renderTextureOverlay(ResourceLocation var1, float var2) {
       RenderSystem.disableDepthTest();
       RenderSystem.depthMask(false);
       RenderSystem.defaultBlendFunc();
-      RenderSystem.color4f(1.0F, 1.0F, 1.0F, var2);
-      RenderSystem.disableAlphaTest();
-      this.minecraft.getTextureManager().bind(var1);
+      RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, var2);
+      RenderSystem.setShaderTexture(0, var1);
       Tesselator var3 = Tesselator.getInstance();
       BufferBuilder var4 = var3.getBuilder();
       var4.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_TEX);
       var4.vertex(0.0D, (double)this.screenHeight, -90.0D).uv(0.0F, 1.0F).endVertex();
       var4.vertex((double)this.screenWidth, (double)this.screenHeight, -90.0D).uv(1.0F, 1.0F).endVertex();
       var4.vertex((double)this.screenWidth, 0.0D, -90.0D).uv(1.0F, 0.0F).endVertex();
       var4.vertex(0.0D, 0.0D, -90.0D).uv(0.0F, 0.0F).endVertex();
       var3.end();
       RenderSystem.depthMask(true);
       RenderSystem.enableDepthTest();
-      RenderSystem.enableAlphaTest();
-      RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+      RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
    }
 
    private void renderSpyglassOverlay(float var1) {
       RenderSystem.disableDepthTest();
       RenderSystem.depthMask(false);
       RenderSystem.defaultBlendFunc();
-      RenderSystem.disableAlphaTest();
-      this.minecraft.getTextureManager().bind(SPYGLASS_SCOPE_LOCATION);
+      RenderSystem.setShaderTexture(0, SPYGLASS_SCOPE_LOCATION);
       Tesselator var2 = Tesselator.getInstance();
       BufferBuilder var3 = var2.getBuilder();
       float var4 = (float)Math.min(this.screenWidth, this.screenHeight);
       float var6 = Math.min((float)this.screenWidth / var4, (float)this.screenHeight / var4) * var1;
       float var7 = var4 * var6;
@@ -1028,10 +1024,11 @@
       var3.vertex((double)var9, (double)var12, -90.0D).uv(0.0F, 1.0F).endVertex();
       var3.vertex((double)var11, (double)var12, -90.0D).uv(1.0F, 1.0F).endVertex();
       var3.vertex((double)var11, (double)var10, -90.0D).uv(1.0F, 0.0F).endVertex();
       var3.vertex((double)var9, (double)var10, -90.0D).uv(0.0F, 0.0F).endVertex();
       var2.end();
+      RenderSystem.setShader(GameRenderer::getPositionColorShader);
       RenderSystem.disableTexture();
       var3.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_COLOR);
       var3.vertex(0.0D, (double)this.screenHeight, -90.0D).color(0, 0, 0, 255).endVertex();
       var3.vertex((double)this.screenWidth, (double)this.screenHeight, -90.0D).color(0, 0, 0, 255).endVertex();
       var3.vertex((double)this.screenWidth, (double)var12, -90.0D).color(0, 0, 0, 255).endVertex();
@@ -1050,12 +1047,11 @@
       var3.vertex((double)var11, (double)var10, -90.0D).color(0, 0, 0, 255).endVertex();
       var2.end();
       RenderSystem.enableTexture();
       RenderSystem.depthMask(true);
       RenderSystem.enableDepthTest();
-      RenderSystem.enableAlphaTest();
-      RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+      RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
    }
 
    private void updateVignetteBrightness(Entity var1) {
       if (var1 != null) {
          float var2 = Mth.clamp(1.0F - var1.getBrightness(), 0.0F, 1.0F);
@@ -1076,43 +1072,43 @@
 
       RenderSystem.disableDepthTest();
       RenderSystem.depthMask(false);
       RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.ZERO, GlStateManager.DestFactor.ONE_MINUS_SRC_COLOR, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
       if (var3 > 0.0F) {
-         RenderSystem.color4f(0.0F, var3, var3, 1.0F);
+         RenderSystem.setShaderColor(0.0F, var3, var3, 1.0F);
       } else {
-         RenderSystem.color4f(this.vignetteBrightness, this.vignetteBrightness, this.vignetteBrightness, 1.0F);
+         RenderSystem.setShaderColor(this.vignetteBrightness, this.vignetteBrightness, this.vignetteBrightness, 1.0F);
       }
 
-      this.minecraft.getTextureManager().bind(VIGNETTE_LOCATION);
+      RenderSystem.setShader(GameRenderer::getPositionTexShader);
+      RenderSystem.setShaderTexture(0, VIGNETTE_LOCATION);
       Tesselator var8 = Tesselator.getInstance();
       BufferBuilder var9 = var8.getBuilder();
       var9.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_TEX);
       var9.vertex(0.0D, (double)this.screenHeight, -90.0D).uv(0.0F, 1.0F).endVertex();
       var9.vertex((double)this.screenWidth, (double)this.screenHeight, -90.0D).uv(1.0F, 1.0F).endVertex();
       var9.vertex((double)this.screenWidth, 0.0D, -90.0D).uv(1.0F, 0.0F).endVertex();
       var9.vertex(0.0D, 0.0D, -90.0D).uv(0.0F, 0.0F).endVertex();
       var8.end();
       RenderSystem.depthMask(true);
       RenderSystem.enableDepthTest();
-      RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+      RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
       RenderSystem.defaultBlendFunc();
    }
 
    private void renderPortalOverlay(float var1) {
       if (var1 < 1.0F) {
          var1 *= var1;
          var1 *= var1;
          var1 = var1 * 0.8F + 0.2F;
       }
 
-      RenderSystem.disableAlphaTest();
       RenderSystem.disableDepthTest();
       RenderSystem.depthMask(false);
       RenderSystem.defaultBlendFunc();
-      RenderSystem.color4f(1.0F, 1.0F, 1.0F, var1);
-      this.minecraft.getTextureManager().bind(TextureAtlas.LOCATION_BLOCKS);
+      RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, var1);
+      RenderSystem.setShaderTexture(0, TextureAtlas.LOCATION_BLOCKS);
       TextureAtlasSprite var2 = this.minecraft.getBlockRenderer().getBlockModelShaper().getParticleIcon(Blocks.NETHER_PORTAL.defaultBlockState());
       float var3 = var2.getU0();
       float var4 = var2.getV0();
       float var5 = var2.getU1();
       float var6 = var2.getV1();
@@ -1124,28 +1120,31 @@
       var8.vertex((double)this.screenWidth, 0.0D, -90.0D).uv(var5, var4).endVertex();
       var8.vertex(0.0D, 0.0D, -90.0D).uv(var3, var4).endVertex();
       var7.end();
       RenderSystem.depthMask(true);
       RenderSystem.enableDepthTest();
-      RenderSystem.enableAlphaTest();
-      RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+      RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
    }
 
    private void renderSlot(int var1, int var2, float var3, Player var4, ItemStack var5, int var6) {
       if (!var5.isEmpty()) {
-         float var7 = (float)var5.getPopTime() - var3;
-         if (var7 > 0.0F) {
-            RenderSystem.pushMatrix();
-            float var8 = 1.0F + var7 / 5.0F;
-            RenderSystem.translatef((float)(var1 + 8), (float)(var2 + 12), 0.0F);
-            RenderSystem.scalef(1.0F / var8, (var8 + 1.0F) / 2.0F, 1.0F);
-            RenderSystem.translatef((float)(-(var1 + 8)), (float)(-(var2 + 12)), 0.0F);
+         PoseStack var7 = RenderSystem.getModelViewStack();
+         float var8 = (float)var5.getPopTime() - var3;
+         if (var8 > 0.0F) {
+            float var9 = 1.0F + var8 / 5.0F;
+            var7.pushPose();
+            var7.translate((double)(var1 + 8), (double)(var2 + 12), 0.0D);
+            var7.scale(1.0F / var9, (var9 + 1.0F) / 2.0F, 1.0F);
+            var7.translate((double)(-(var1 + 8)), (double)(-(var2 + 12)), 0.0D);
+            RenderSystem.applyModelViewMatrix();
          }
 
          this.itemRenderer.renderAndDecorateItem(var4, var5, var1, var2, var6);
-         if (var7 > 0.0F) {
-            RenderSystem.popMatrix();
+         RenderSystem.setShader(GameRenderer::getPositionColorShader);
+         if (var8 > 0.0F) {
+            var7.popPose();
+            RenderSystem.applyModelViewMatrix();
          }
 
          this.itemRenderer.renderGuiItemDecorations(this.minecraft.font, var5, var1, var2);
       }
    }
