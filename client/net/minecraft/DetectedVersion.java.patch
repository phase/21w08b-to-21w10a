--- net/minecraft/DetectedVersion.java
+++ net/minecraft/DetectedVersion.java
@@ -28,13 +28,13 @@
    private final Date buildTime;
    private final String releaseTarget;
 
    private DetectedVersion() {
       this.id = UUID.randomUUID().toString().replaceAll("-", "");
-      this.name = "21w08b";
+      this.name = "21w10a";
       this.stable = false;
-      this.worldVersion = 2698;
+      this.worldVersion = 2699;
       this.protocolVersion = SharedConstants.getProtocolVersion();
       this.resourcePackVersion = 7;
       this.dataPackVersion = 7;
       this.buildTime = new Date();
       this.releaseTarget = "1.17";
@@ -56,41 +56,44 @@
    public static GameVersion tryDetectVersion() {
       try {
          InputStream var0 = DetectedVersion.class.getResourceAsStream("/version.json");
          Throwable var1 = null;
 
-         Object var4;
+         GameVersion var2;
          try {
-            if (var0 == null) {
-               LOGGER.warn("Missing version information!");
-               GameVersion var35 = BUILT_IN;
-               return var35;
-            }
+            if (var0 != null) {
+               InputStreamReader var35 = new InputStreamReader(var0);
+               Throwable var3 = null;
 
-            InputStreamReader var2 = new InputStreamReader(var0);
-            Throwable var3 = null;
-
-            try {
-               var4 = new DetectedVersion(GsonHelper.parse((Reader)var2));
-            } catch (Throwable var30) {
-               var4 = var30;
-               var3 = var30;
-               throw var30;
-            } finally {
-               if (var2 != null) {
-                  if (var3 != null) {
-                     try {
-                        var2.close();
-                     } catch (Throwable var29) {
-                        var3.addSuppressed(var29);
+               try {
+                  Object var4;
+                  try {
+                     var4 = new DetectedVersion(GsonHelper.parse((Reader)var35));
+                     return (GameVersion)var4;
+                  } catch (Throwable var30) {
+                     var4 = var30;
+                     var3 = var30;
+                     throw var30;
+                  }
+               } finally {
+                  if (var35 != null) {
+                     if (var3 != null) {
+                        try {
+                           var35.close();
+                        } catch (Throwable var29) {
+                           var3.addSuppressed(var29);
+                        }
+                     } else {
+                        var35.close();
                      }
-                  } else {
-                     var2.close();
                   }
-               }
 
+               }
             }
+
+            LOGGER.warn("Missing version information!");
+            var2 = BUILT_IN;
          } catch (Throwable var32) {
             var1 = var32;
             throw var32;
          } finally {
             if (var0 != null) {
@@ -105,11 +108,11 @@
                }
             }
 
          }
 
-         return (GameVersion)var4;
+         return var2;
       } catch (JsonParseException | IOException var34) {
          throw new IllegalStateException("Game version information is corrupt", var34);
       }
    }
 
