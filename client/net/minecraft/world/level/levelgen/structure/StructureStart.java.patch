--- net/minecraft/world/level/levelgen/structure/StructureStart.java
+++ net/minecraft/world/level/levelgen/structure/StructureStart.java
@@ -1,17 +1,18 @@
 package net.minecraft.world.level.levelgen.structure;
 
 import com.google.common.collect.Lists;
+import com.mojang.serialization.DataResult;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Registry;
 import net.minecraft.core.RegistryAccess;
-import net.minecraft.core.Vec3i;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
+import net.minecraft.nbt.NbtOps;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.LevelHeightAccessor;
 import net.minecraft.world.level.StructureFeatureManager;
 import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.biome.Biome;
@@ -19,12 +20,15 @@
 import net.minecraft.world.level.levelgen.WorldgenRandom;
 import net.minecraft.world.level.levelgen.feature.StructureFeature;
 import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
 import net.minecraft.world.level.levelgen.feature.configurations.MineshaftConfiguration;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 
 public abstract class StructureStart<C extends FeatureConfiguration> {
+   private static final Logger LOGGER = LogManager.getLogger();
    public static final StructureStart<?> INVALID_START;
    private final StructureFeature<C> feature;
    protected final List<StructurePiece> pieces = Lists.newArrayList();
    protected BoundingBox boundingBox;
    private final ChunkPos chunkPos;
@@ -52,11 +56,11 @@
 
    public void placeInChunk(WorldGenLevel var1, StructureFeatureManager var2, ChunkGenerator var3, Random var4, BoundingBox var5, ChunkPos var6) {
       synchronized(this.pieces) {
          if (!this.pieces.isEmpty()) {
             BoundingBox var8 = ((StructurePiece)this.pieces.get(0)).boundingBox;
-            Vec3i var9 = var8.getCenter();
+            BlockPos var9 = var8.getCenter();
             BlockPos var10 = new BlockPos(var9.getX(), var8.y0, var9.getZ());
             Iterator var11 = this.pieces.iterator();
 
             while(var11.hasNext()) {
                StructurePiece var12 = (StructurePiece)var11.next();
@@ -86,11 +90,16 @@
       if (this.isValid()) {
          var2.putString("id", Registry.STRUCTURE_FEATURE.getKey(this.getFeature()).toString());
          var2.putInt("ChunkX", var1.x);
          var2.putInt("ChunkZ", var1.z);
          var2.putInt("references", this.references);
-         var2.put("BB", this.boundingBox.createTag());
+         DataResult var10000 = BoundingBox.CODEC.encodeStart(NbtOps.INSTANCE, this.boundingBox);
+         Logger var10001 = LOGGER;
+         var10001.getClass();
+         var10000.resultOrPartial(var10001::error).ifPresent((var1x) -> {
+            var2.put("BB", var1x);
+         });
          ListTag var3 = new ListTag();
          synchronized(this.pieces) {
             Iterator var5 = this.pieces.iterator();
 
             while(true) {
