--- net/minecraft/world/level/levelgen/structure/MineShaftPieces.java
+++ net/minecraft/world/level/levelgen/structure/MineShaftPieces.java
@@ -1,16 +1,18 @@
 package net.minecraft.world.level.levelgen.structure;
 
 import com.google.common.collect.Lists;
+import com.mojang.serialization.DataResult;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Optional;
 import java.util.Random;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.nbt.CompoundTag;
-import net.minecraft.nbt.ListTag;
+import net.minecraft.nbt.NbtOps;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.vehicle.MinecartChest;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.ChunkPos;
@@ -30,12 +32,16 @@
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.feature.MineshaftFeature;
 import net.minecraft.world.level.levelgen.feature.StructurePieceType;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager;
 import net.minecraft.world.level.storage.loot.BuiltInLootTables;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 
 public class MineShaftPieces {
+   private static final Logger LOGGER = LogManager.getLogger();
+
    private static MineShaftPieces.MineShaftPiece createRandomShaftPiece(List<StructurePiece> var0, Random var1, int var2, int var3, int var4, @Nullable Direction var5, int var6, MineshaftFeature.Type var7) {
       int var8 = var1.nextInt(100);
       BoundingBox var9;
       if (var8 >= 80) {
          var9 = MineShaftPieces.MineShaftCrossing.findCrossing(var0, var1, var2, var3, var4, var5);
@@ -649,16 +655,16 @@
          this.boundingBox = new BoundingBox(var3, 50, var4, var3 + 7 + var2.nextInt(6), 54 + var2.nextInt(6), var4 + 7 + var2.nextInt(6));
       }
 
       public MineShaftRoom(StructureManager var1, CompoundTag var2) {
          super(StructurePieceType.MINE_SHAFT_ROOM, var2);
-         ListTag var3 = var2.getList("Entrances", 11);
-
-         for(int var4 = 0; var4 < var3.size(); ++var4) {
-            this.childEntranceBoxes.add(new BoundingBox(var3.getIntArray(var4)));
-         }
-
+         DataResult var10000 = BoundingBox.CODEC.listOf().parse(NbtOps.INSTANCE, var2.getList("Entrances", 11));
+         Logger var10001 = MineShaftPieces.LOGGER;
+         var10001.getClass();
+         Optional var3 = var10000.resultOrPartial(var10001::error);
+         List var4 = this.childEntranceBoxes;
+         var3.ifPresent(var4::addAll);
       }
 
       public void addChildren(StructurePiece var1, List<StructurePiece> var2, Random var3) {
          int var4 = this.getGenDepth();
          int var6 = this.boundingBox.getYSpan() - 3 - 1;
@@ -752,19 +758,16 @@
 
       }
 
       protected void addAdditionalSaveData(CompoundTag var1) {
          super.addAdditionalSaveData(var1);
-         ListTag var2 = new ListTag();
-         Iterator var3 = this.childEntranceBoxes.iterator();
-
-         while(var3.hasNext()) {
-            BoundingBox var4 = (BoundingBox)var3.next();
-            var2.add(var4.createTag());
-         }
-
-         var1.put("Entrances", var2);
+         DataResult var10000 = BoundingBox.CODEC.listOf().encodeStart(NbtOps.INSTANCE, this.childEntranceBoxes);
+         Logger var10001 = MineShaftPieces.LOGGER;
+         var10001.getClass();
+         var10000.resultOrPartial(var10001::error).ifPresent((var1x) -> {
+            var1.put("Entrances", var1x);
+         });
       }
    }
 
    abstract static class MineShaftPiece extends StructurePiece {
       protected MineshaftFeature.Type type;
