--- net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
+++ net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
@@ -1,7 +1,8 @@
 package net.minecraft.world.level.levelgen;
 
+import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Sets;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.util.HashSet;
 import java.util.Iterator;
@@ -125,14 +126,19 @@
       return this.seed == var1 && ((NoiseGeneratorSettings)this.settings.get()).stable(var3);
    }
 
    private double[] makeAndFillNoiseColumn(int var1, int var2, int var3, int var4) {
       double[] var5 = new double[var4 + 1];
-      this.sampler.fillNoiseColumn(var5, var1, var2, ((NoiseGeneratorSettings)this.settings.get()).noiseSettings(), this.getSeaLevel(), var3, var4);
+      this.fillNoiseColumn(var5, var1, var2, var3, var4);
       return var5;
    }
 
+   private void fillNoiseColumn(double[] var1, int var2, int var3, int var4, int var5) {
+      NoiseSettings var6 = ((NoiseGeneratorSettings)this.settings.get()).noiseSettings();
+      this.sampler.fillNoiseColumn(var1, var2, var3, var6, this.getSeaLevel(), var4, var5);
+   }
+
    public int getBaseHeight(int var1, int var2, Heightmap.Types var3, LevelHeightAccessor var4) {
       int var5 = Math.max(((NoiseGeneratorSettings)this.settings.get()).noiseSettings().minY(), var4.getMinBuildHeight());
       int var6 = Math.min(((NoiseGeneratorSettings)this.settings.get()).noiseSettings().minY() + ((NoiseGeneratorSettings)this.settings.get()).noiseSettings().height(), var4.getMaxBuildHeight());
       int var7 = Mth.intFloorDiv(var5, this.cellHeight);
       int var8 = Mth.intFloorDiv(var6 - var5, this.cellHeight);
@@ -204,10 +210,12 @@
       }
 
       BlockState var11;
       if (var9 > 0.0D) {
          var11 = var3.getBaseStone(var4, var5, var6, (NoiseGeneratorSettings)this.settings.get());
+      } else if (this.aquifersEnabled && var5 < this.getMinY() + 9) {
+         var11 = Blocks.LAVA.defaultBlockState();
       } else {
          int var12 = var2 == null ? this.getSeaLevel() : var2.getLastWaterLevel();
          if (var5 < var12) {
             var11 = this.defaultFluid;
          } else {
@@ -330,107 +338,81 @@
       int var11 = var9.z;
       int var12 = var9.getMinBlockX();
       int var13 = var9.getMinBlockZ();
       Beardifier var14 = new Beardifier(var1, var2);
       Aquifer var15 = this.aquifersEnabled ? new Aquifer(var10, var11, this.barrierNoise, this.waterLevelNoise, (NoiseGeneratorSettings)this.settings.get(), this.sampler, var4 * this.cellHeight) : null;
-      double[][][] var16 = new double[2][this.cellCountZ + 1][var4 + 1];
+      NoiseInterpolator var16 = new NoiseInterpolator(this.cellCountX, var4, this.cellCountZ, var10, var11, var3, this::fillNoiseColumn);
+      ImmutableList var17 = ImmutableList.of(var16);
+      var17.forEach(NoiseInterpolator::initializeForFirstCellX);
+      BlockPos.MutableBlockPos var18 = new BlockPos.MutableBlockPos();
 
-      int var19;
-      int var20;
-      for(int var17 = 0; var17 < this.cellCountZ + 1; ++var17) {
-         var16[0][var17] = new double[var4 + 1];
-         double[] var18 = var16[0][var17];
-         var19 = var10 * this.cellCountX;
-         var20 = var11 * this.cellCountZ + var17;
-         this.sampler.fillNoiseColumn(var18, var19, var20, var5, this.getSeaLevel(), var3, var4);
-         var16[1][var17] = new double[var4 + 1];
-      }
+      for(int var19 = 0; var19 < this.cellCountX; ++var19) {
+         var17.forEach((var1x) -> {
+            var1x.advanceCellX(var19);
+         });
 
-      BlockPos.MutableBlockPos var70 = new BlockPos.MutableBlockPos();
+         for(int var21 = 0; var21 < this.cellCountZ; ++var21) {
+            LevelChunkSection var22 = var2.getOrCreateSection(var2.getSectionsCount() - 1);
 
-      for(int var71 = 0; var71 < this.cellCountX; ++var71) {
-         var19 = var10 * this.cellCountX + var71 + 1;
+            for(int var23 = var4 - 1; var23 >= 0; --var23) {
+               var17.forEach((var2x) -> {
+                  var2x.selectCellYZ(var23, var21);
+               });
 
-         int var22;
-         for(var20 = 0; var20 < this.cellCountZ + 1; ++var20) {
-            double[] var21 = var16[1][var20];
-            var22 = var11 * this.cellCountZ + var20;
-            this.sampler.fillNoiseColumn(var21, var19, var22, var5, this.getSeaLevel(), var3, var4);
-         }
-
-         for(var20 = 0; var20 < this.cellCountZ; ++var20) {
-            LevelChunkSection var72 = var2.getOrCreateSection(var2.getSectionsCount() - 1);
-
-            for(var22 = var4 - 1; var22 >= 0; --var22) {
-               double var23 = var16[0][var20][var22];
-               double var25 = var16[0][var20 + 1][var22];
-               double var27 = var16[1][var20][var22];
-               double var29 = var16[1][var20 + 1][var22];
-               double var31 = var16[0][var20][var22 + 1];
-               double var33 = var16[0][var20 + 1][var22 + 1];
-               double var35 = var16[1][var20][var22 + 1];
-               double var37 = var16[1][var20 + 1][var22 + 1];
-
-               for(int var39 = this.cellHeight - 1; var39 >= 0; --var39) {
-                  int var40 = var22 * this.cellHeight + var39 + var6;
-                  int var41 = var40 & 15;
-                  int var42 = var2.getSectionIndex(var40);
-                  if (var2.getSectionIndex(var72.bottomBlockY()) != var42) {
-                     var72 = var2.getOrCreateSection(var42);
+               for(int var26 = this.cellHeight - 1; var26 >= 0; --var26) {
+                  int var27 = var23 * this.cellHeight + var26 + var6;
+                  int var28 = var27 & 15;
+                  int var29 = var2.getSectionIndex(var27);
+                  if (var2.getSectionIndex(var22.bottomBlockY()) != var29) {
+                     var22 = var2.getOrCreateSection(var29);
                   }
 
-                  double var43 = (double)var39 / (double)this.cellHeight;
-                  double var45 = Mth.lerp(var43, var23, var31);
-                  double var47 = Mth.lerp(var43, var27, var35);
-                  double var49 = Mth.lerp(var43, var25, var33);
-                  double var51 = Mth.lerp(var43, var29, var37);
+                  double var30 = (double)var26 / (double)this.cellHeight;
+                  var17.forEach((var2x) -> {
+                     var2x.updateForY(var30);
+                  });
 
-                  for(int var53 = 0; var53 < this.cellWidth; ++var53) {
-                     int var54 = var12 + var71 * this.cellWidth + var53;
-                     int var55 = var54 & 15;
-                     double var56 = (double)var53 / (double)this.cellWidth;
-                     double var58 = Mth.lerp(var56, var45, var47);
-                     double var60 = Mth.lerp(var56, var49, var51);
+                  for(int var32 = 0; var32 < this.cellWidth; ++var32) {
+                     int var33 = var12 + var19 * this.cellWidth + var32;
+                     int var34 = var33 & 15;
+                     double var35 = (double)var32 / (double)this.cellWidth;
+                     var17.forEach((var2x) -> {
+                        var2x.updateForX(var35);
+                     });
 
-                     for(int var62 = 0; var62 < this.cellWidth; ++var62) {
-                        int var63 = var13 + var20 * this.cellWidth + var62;
-                        int var64 = var63 & 15;
-                        double var65 = (double)var62 / (double)this.cellWidth;
-                        double var67 = Mth.lerp(var65, var58, var60);
-                        BlockState var69 = this.updateNoiseAndGenerateBaseState(var14, var15, this.baseStoneSource, var54, var40, var63, var67);
-                        if (var69 != AIR) {
-                           if (var69.getLightEmission() != 0 && var2 instanceof ProtoChunk) {
-                              var70.set(var54, var40, var63);
-                              ((ProtoChunk)var2).addLight(var70);
+                     for(int var37 = 0; var37 < this.cellWidth; ++var37) {
+                        int var38 = var13 + var21 * this.cellWidth + var37;
+                        int var39 = var38 & 15;
+                        double var40 = (double)var37 / (double)this.cellWidth;
+                        double var42 = var16.calculateValue(var40);
+                        BlockState var44 = this.updateNoiseAndGenerateBaseState(var14, var15, this.baseStoneSource, var33, var27, var38, var42);
+                        if (var44 != AIR) {
+                           if (var44.getLightEmission() != 0 && var2 instanceof ProtoChunk) {
+                              var18.set(var33, var27, var38);
+                              ((ProtoChunk)var2).addLight(var18);
                            }
 
-                           var72.setBlockState(var55, var41, var64, var69, false);
-                           var7.update(var55, var40, var64, var69);
-                           var8.update(var55, var40, var64, var69);
-                           if (var15 != null && var15.shouldScheduleWaterUpdate() && !var69.getFluidState().isEmpty()) {
-                              var70.set(var54, var40, var63);
-                              var2.getLiquidTicks().scheduleTick(var70, var69.getFluidState().getType(), 0);
+                           var22.setBlockState(var34, var28, var39, var44, false);
+                           var7.update(var34, var27, var39, var44);
+                           var8.update(var34, var27, var39, var44);
+                           if (var15 != null && var15.shouldScheduleWaterUpdate() && !var44.getFluidState().isEmpty()) {
+                              var18.set(var33, var27, var38);
+                              var2.getLiquidTicks().scheduleTick(var18, var44.getFluidState().getType(), 0);
                            }
                         }
                      }
                   }
                }
             }
          }
 
-         this.swapFirstTwoElements(var16);
+         var17.forEach(NoiseInterpolator::swapSlices);
       }
 
       return var2;
    }
 
-   public <T> void swapFirstTwoElements(T[] var1) {
-      Object var2 = var1[0];
-      var1[0] = var1[1];
-      var1[1] = var2;
-   }
-
    public int getGenDepth() {
       return this.height;
    }
 
    public int getSeaLevel() {
